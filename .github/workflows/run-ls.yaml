---
name: deploy
on:
  push:
    branches:
      - main
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json

jobs:
  prepare-environment:
    name: configure-credentials-and-terraform
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub’s OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        ## the following creates an ARN based on the values entered into github secrets
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
        role-session-name: myGitHubActions
    - name: Install Terraform
      run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
          terraform -version
    - name: Check files
      run: |
          ls -larth
  deploy-terraform:
    name: deploy-terraform
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub’s OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Install Terraform
      run: |
          chmod +x ./example/vars.sh
          ./example/deploy_example.sh
    - name: Check files
      run: |
          ls -larth
          cat tf.plan




    
    # - name: Install dependencies
    #   run: |
    #       python -m pip install --upgrade pip
    #       pip install awscli
    # - run: |
    #       aws s3 ls
       
    # - name: Deploy EC2 Bastion
    #   uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
    #   with:
    #     name: myEC2bastion
    #     ## change to path to template in your github repo
    #     template: cloudformation/ec2-bastion.yml
    #     capabilities: CAPABILITY_IAM, CAPABILITY_NAMED_IAM
    #     no-fail-on-empty-changeset: "1"
    #     ## parameter set in github secrets
    #     parameter-overrides: "pVpc=${{ secrets.VPC_ID }},pSubnet=${{ secrets.SUBNET_ID }}"
